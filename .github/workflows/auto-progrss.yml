name: Move linked issue to In Progress on branch creation
on:
  create:
    branches:
      - '**'

jobs:
  move-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Extract issue number from branch name
        id: extract
        run: |
          BRANCH="${GITHUB_REF##*/}"
          ISSUE=$(echo "$BRANCH" | grep -oE '[0-9]+')
          echo "issue_number=$ISSUE" >> $GITHUB_OUTPUT

      - name: Move issue to 'In Progress' in Project v2
        if: steps.extract.outputs.issue_number != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TOKEN_MYKEY }}
          script: |
            const issueNumber = '${{ steps.extract.outputs.issue_number }}';
            const projectNumber = 1; // 프로젝트 번호 (하드코딩)
            const statusName = 'In Progress'; // 상태 이름
            
            // 1. Check if repository owner is a user or organization
            // Try organization first, then user if it fails
            let isOrganization = false;
            try {
              const orgCheckQuery = `
                query($login: String!) {
                  organization(login: $login) {
                    id
                  }
                }
              `;
              const orgResult = await github.graphql(orgCheckQuery, { 
                login: context.repo.owner 
              });
              isOrganization = orgResult.organization !== null;
            } catch (error) {
              // Not an organization, will use user query
              isOrganization = false;
            }
            
            // Use dynamic query construction based on whether it's an org or user
            let projectResponse;
            let projectId;
            
            if (isOrganization) {
              const orgQuery = `
                query($login: String!, $number: Int!) {
                  organization(login: $login) {
                    projectV2(number: $number) {
                      id
                    }
                  }
                }
              `;
              projectResponse = await github.graphql(orgQuery, { 
                login: context.repo.owner,
                number: projectNumber 
              });
              projectId = projectResponse.organization.projectV2.id;
            } else {
              const userQuery = `
                query($login: String!, $number: Int!) {
                  user(login: $login) {
                    projectV2(number: $number) {
                      id
                    }
                  }
                }
              `;
              projectResponse = await github.graphql(userQuery, { 
                login: context.repo.owner,
                number: projectNumber 
              });
              projectId = projectResponse.user.projectV2.id;
            }
            
            // 2. Get issue node ID
            const issueQuery = `
              query($owner: String!, $repo: String!, $issue: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issue) {
                    id
                  }
                }
              }
            `;
            
            const issueResponse = await github.graphql(issueQuery, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue: parseInt(issueNumber)
            });
            const issueId = issueResponse.repository.issue.id;
            
            // 3. Get status field ID
            const fieldsQuery = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            
            const fieldsResponse = await github.graphql(fieldsQuery, { projectId: projectId });
            const statusField = fieldsResponse.node.fields.nodes.find(f => f.name === 'Status');
            const statusValue = statusField.options.find(o => o.name === statusName);
            
            // 3-1. Add issue to project if not already added
            const addItemMutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }
            `;
            
            let projectItemId;
            try {
              const addItemResponse = await github.graphql(addItemMutation, {
                projectId: projectId,
                contentId: issueId
              });
              projectItemId = addItemResponse.addProjectV2ItemById.item.id;
              console.log(`Issue #${issueNumber} added to Project ${projectNumber}`);
            } catch (error) {
              // Item might already be in project
              if (error.message && error.message.includes('already exists')) {
                console.log(`Issue #${issueNumber} already in Project ${projectNumber}`);
              }
              // Use the issue ID as fallback
              projectItemId = issueId;
            }
            
            // 4. Update issue status
            const updateMutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $valueId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $valueId }
                  }
                ) {
                  clientMutationId
                }
              }
            `;
            
            await github.graphql(updateMutation, {
              projectId: projectId,
              itemId: projectItemId,
              fieldId: statusField.id,
              valueId: statusValue.id
            });
            
            console.log(`Issue #${issueNumber} moved to ${statusName} in Project ${projectNumber}`);
